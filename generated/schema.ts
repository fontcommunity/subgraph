// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class FontNFTEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("realOwner", Value.fromBytes(Bytes.empty()));
    this.set("originalNFTCreator", Value.fromBytes(Bytes.empty()));
    this.set("royality", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FontNFTEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FontNFTEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FontNFTEntity", id.toString(), this);
    }
  }

  static load(id: string): FontNFTEntity | null {
    return changetype<FontNFTEntity | null>(store.get("FontNFTEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get minted(): boolean {
    let value = this.get("minted");
    return value!.toBoolean();
  }

  set minted(value: boolean) {
    this.set("minted", Value.fromBoolean(value));
  }

  get custody(): boolean {
    let value = this.get("custody");
    return value!.toBoolean();
  }

  set custody(value: boolean) {
    this.set("custody", Value.fromBoolean(value));
  }

  get realOwner(): Bytes {
    let value = this.get("realOwner");
    return value!.toBytes();
  }

  set realOwner(value: Bytes) {
    this.set("realOwner", Value.fromBytes(value));
  }

  get originalNFTCreator(): Bytes {
    let value = this.get("originalNFTCreator");
    return value!.toBytes();
  }

  set originalNFTCreator(value: Bytes) {
    this.set("originalNFTCreator", Value.fromBytes(value));
  }

  get royality(): i32 {
    let value = this.get("royality");
    return value!.toI32();
  }

  set royality(value: i32) {
    this.set("royality", Value.fromI32(value));
  }

  get referralCommission(): i32 {
    let value = this.get("referralCommission");
    return value!.toI32();
  }

  set referralCommission(value: i32) {
    this.set("referralCommission", Value.fromI32(value));
  }

  get boost(): BigInt | null {
    let value = this.get("boost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set boost(value: BigInt | null) {
    if (!value) {
      this.unset("boost");
    } else {
      this.set("boost", Value.fromBigInt(<BigInt>value));
    }
  }

  get orderID(): BigInt | null {
    let value = this.get("orderID");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set orderID(value: BigInt | null) {
    if (!value) {
      this.unset("orderID");
    } else {
      this.set("orderID", Value.fromBigInt(<BigInt>value));
    }
  }

  get auction(): boolean {
    let value = this.get("auction");
    return value!.toBoolean();
  }

  set auction(value: boolean) {
    this.set("auction", Value.fromBoolean(value));
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(<Bytes>value));
    }
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get minPrice(): BigInt | null {
    let value = this.get("minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("minPrice");
    } else {
      this.set("minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get highestBidID(): BigInt | null {
    let value = this.get("highestBidID");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set highestBidID(value: BigInt | null) {
    if (!value) {
      this.unset("highestBidID");
    } else {
      this.set("highestBidID", Value.fromBigInt(<BigInt>value));
    }
  }

  get dateMinted(): i32 {
    let value = this.get("dateMinted");
    return value!.toI32();
  }

  set dateMinted(value: i32) {
    this.set("dateMinted", Value.fromI32(value));
  }

  get dateMapped(): i32 {
    let value = this.get("dateMapped");
    return value!.toI32();
  }

  set dateMapped(value: i32) {
    this.set("dateMapped", Value.fromI32(value));
  }

  get dateUpdated(): i32 {
    let value = this.get("dateUpdated");
    return value!.toI32();
  }

  set dateUpdated(value: i32) {
    this.set("dateUpdated", Value.fromI32(value));
  }

  get orderCount(): i32 {
    let value = this.get("orderCount");
    return value!.toI32();
  }

  set orderCount(value: i32) {
    this.set("orderCount", Value.fromI32(value));
  }

  get ownersCount(): i32 {
    let value = this.get("ownersCount");
    return value!.toI32();
  }

  set ownersCount(value: i32) {
    this.set("ownersCount", Value.fromI32(value));
  }
}

export class DebuggerStuff extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DebuggerStuff entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DebuggerStuff must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DebuggerStuff", id.toString(), this);
    }
  }

  static load(id: string): DebuggerStuff | null {
    return changetype<DebuggerStuff | null>(store.get("DebuggerStuff", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get msg(): string | null {
    let value = this.get("msg");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set msg(value: string | null) {
    if (!value) {
      this.unset("msg");
    } else {
      this.set("msg", Value.fromString(<string>value));
    }
  }
}
