// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BidCanceled extends ethereum.Event {
  get params(): BidCanceled__Params {
    return new BidCanceled__Params(this);
  }
}

export class BidCanceled__Params {
  _event: BidCanceled;

  constructor(event: BidCanceled) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BidOrder extends ethereum.Event {
  get params(): BidOrder__Params {
    return new BidOrder__Params(this);
  }
}

export class BidOrder__Params {
  _event: BidOrder;

  constructor(event: BidOrder) {
    this._event = event;
  }

  get nft(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _bid_id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Boosted extends ethereum.Event {
  get params(): Boosted__Params {
    return new Boosted__Params(this);
  }
}

export class Boosted__Params {
  _event: Boosted;

  constructor(event: Boosted) {
    this._event = event;
  }

  get nft_id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get font_amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BoughtLicense extends ethereum.Event {
  get params(): BoughtLicense__Params {
    return new BoughtLicense__Params(this);
  }
}

export class BoughtLicense__Params {
  _event: BoughtLicense;

  constructor(event: BoughtLicense) {
    this._event = event;
  }

  get License(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class EarningsClaimed extends ethereum.Event {
  get params(): EarningsClaimed__Params {
    return new EarningsClaimed__Params(this);
  }
}

export class EarningsClaimed__Params {
  _event: EarningsClaimed;

  constructor(event: EarningsClaimed) {
    this._event = event;
  }

  get param0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get param1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get param2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EditedPaymentTokens extends ethereum.Event {
  get params(): EditedPaymentTokens__Params {
    return new EditedPaymentTokens__Params(this);
  }
}

export class EditedPaymentTokens__Params {
  _event: EditedPaymentTokens;

  constructor(event: EditedPaymentTokens) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get miningReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OrderBidApproved extends ethereum.Event {
  get params(): OrderBidApproved__Params {
    return new OrderBidApproved__Params(this);
  }
}

export class OrderBidApproved__Params {
  _event: OrderBidApproved;

  constructor(event: OrderBidApproved) {
    this._event = event;
  }

  get _bid_id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OrderBought extends ethereum.Event {
  get params(): OrderBought__Params {
    return new OrderBought__Params(this);
  }
}

export class OrderBought__Params {
  _event: OrderBought;

  constructor(event: OrderBought) {
    this._event = event;
  }

  get nft(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OrderCanceled extends ethereum.Event {
  get params(): OrderCanceled__Params {
    return new OrderCanceled__Params(this);
  }
}

export class OrderCanceled__Params {
  _event: OrderCanceled;

  constructor(event: OrderCanceled) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OrderCreated extends ethereum.Event {
  get params(): OrderCreated__Params {
    return new OrderCreated__Params(this);
  }
}

export class OrderCreated__Params {
  _event: OrderCreated;

  constructor(event: OrderCreated) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OrderEdited extends ethereum.Event {
  get params(): OrderEdited__Params {
    return new OrderEdited__Params(this);
  }
}

export class OrderEdited__Params {
  _event: OrderEdited;

  constructor(event: OrderEdited) {
    this._event = event;
  }

  get nft(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get param0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get param1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoyalitiesUpdated extends ethereum.Event {
  get params(): RoyalitiesUpdated__Params {
    return new RoyalitiesUpdated__Params(this);
  }
}

export class RoyalitiesUpdated__Params {
  _event: RoyalitiesUpdated;

  constructor(event: RoyalitiesUpdated) {
    this._event = event;
  }

  get nft(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UserAddedBulk extends ethereum.Event {
  get params(): UserAddedBulk__Params {
    return new UserAddedBulk__Params(this);
  }
}

export class UserAddedBulk__Params {
  _event: UserAddedBulk;

  constructor(event: UserAddedBulk) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UserEdited extends ethereum.Event {
  get params(): UserEdited__Params {
    return new UserEdited__Params(this);
  }
}

export class UserEdited__Params {
  _event: UserEdited;

  constructor(event: UserEdited) {
    this._event = event;
  }

  get param0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get param1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FontNFT__viewBidResultValue0Struct extends ethereum.Tuple {
  get status(): i32 {
    return this[0].toI32();
  }

  get bidder(): Address {
    return this[1].toAddress();
  }

  get referral(): Address {
    return this[2].toAddress();
  }

  get orderID(): BigInt {
    return this[3].toBigInt();
  }

  get offer(): BigInt {
    return this[4].toBigInt();
  }
}

export class FontNFT__viewNFTResultValue0Struct extends ethereum.Tuple {
  get auction(): boolean {
    return this[0].toBoolean();
  }

  get status(): i32 {
    return this[1].toI32();
  }

  get royality(): i32 {
    return this[2].toI32();
  }

  get referralCommission(): i32 {
    return this[3].toI32();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get token(): Address {
    return this[5].toAddress();
  }

  get orderID(): BigInt {
    return this[6].toBigInt();
  }

  get price(): BigInt {
    return this[7].toBigInt();
  }

  get minPrice(): BigInt {
    return this[8].toBigInt();
  }

  get highestBidID(): BigInt {
    return this[9].toBigInt();
  }
}

export class FontNFT extends ethereum.SmartContract {
  static bind(address: Address): FontNFT {
    return new FontNFT("FontNFT", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FontERC20Address(): Address {
    let result = super.call(
      "FontERC20Address",
      "FontERC20Address():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_FontERC20Address(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "FontERC20Address",
      "FontERC20Address():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FontRewardPaused(): boolean {
    let result = super.call(
      "FontRewardPaused",
      "FontRewardPaused():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_FontRewardPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "FontRewardPaused",
      "FontRewardPaused():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  FontRewardPerToken(param0: Address): BigInt {
    let result = super.call(
      "FontRewardPerToken",
      "FontRewardPerToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_FontRewardPerToken(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FontRewardPerToken",
      "FontRewardPerToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NFTBoost(param0: BigInt): BigInt {
    let result = super.call("NFTBoost", "NFTBoost(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_NFTBoost(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("NFTBoost", "NFTBoost(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OrderID(): BigInt {
    let result = super.call("OrderID", "OrderID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_OrderID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("OrderID", "OrderID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OriginalNFTCreators(param0: BigInt): Address {
    let result = super.call(
      "OriginalNFTCreators",
      "OriginalNFTCreators(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_OriginalNFTCreators(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "OriginalNFTCreators",
      "OriginalNFTCreators(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commissionFees(param0: Address): BigInt {
    let result = super.call(
      "commissionFees",
      "commissionFees(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_commissionFees(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commissionFees",
      "commissionFees(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchangeFees(): BigInt {
    let result = super.call("exchangeFees", "exchangeFees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_exchangeFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exchangeFees", "exchangeFees():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feesDistributionAddress(): Address {
    let result = super.call(
      "feesDistributionAddress",
      "feesDistributionAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_feesDistributionAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "feesDistributionAddress",
      "feesDistributionAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRealOwner(nft_id: BigInt): Address {
    let result = super.call("getRealOwner", "getRealOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(nft_id)
    ]);

    return result[0].toAddress();
  }

  try_getRealOwner(nft_id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRealOwner",
      "getRealOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(nft_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(nft: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(nft)
    ]);

    return result[0].toString();
  }

  try_tokenURI(nft: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(nft)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  viewBid(_id: BigInt): FontNFT__viewBidResultValue0Struct {
    let result = super.call(
      "viewBid",
      "viewBid(uint256):((uint8,address,address,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return changetype<FontNFT__viewBidResultValue0Struct>(result[0].toTuple());
  }

  try_viewBid(
    _id: BigInt
  ): ethereum.CallResult<FontNFT__viewBidResultValue0Struct> {
    let result = super.tryCall(
      "viewBid",
      "viewBid(uint256):((uint8,address,address,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<FontNFT__viewBidResultValue0Struct>(value[0].toTuple())
    );
  }

  viewEarnings(_user: Address, _token: Address): BigInt {
    let result = super.call(
      "viewEarnings",
      "viewEarnings(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_viewEarnings(
    _user: Address,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewEarnings",
      "viewEarnings(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewFontRewards(_user: Address): BigInt {
    let result = super.call(
      "viewFontRewards",
      "viewFontRewards(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_viewFontRewards(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewFontRewards",
      "viewFontRewards(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewNFT(_id: BigInt): FontNFT__viewNFTResultValue0Struct {
    let result = super.call(
      "viewNFT",
      "viewNFT(uint256):((bool,uint8,uint16,uint16,address,address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return changetype<FontNFT__viewNFTResultValue0Struct>(result[0].toTuple());
  }

  try_viewNFT(
    _id: BigInt
  ): ethereum.CallResult<FontNFT__viewNFTResultValue0Struct> {
    let result = super.tryCall(
      "viewNFT",
      "viewNFT(uint256):((bool,uint8,uint16,uint16,address,address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<FontNFT__viewNFTResultValue0Struct>(value[0].toTuple())
    );
  }

  viewOrderBids(orderID: BigInt): Array<BigInt> {
    let result = super.call(
      "viewOrderBids",
      "viewOrderBids(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(orderID)]
    );

    return result[0].toBigIntArray();
  }

  try_viewOrderBids(orderID: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "viewOrderBids",
      "viewOrderBids(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(orderID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  viewPaymentMethod(_token: Address): boolean {
    let result = super.call(
      "viewPaymentMethod",
      "viewPaymentMethod(address):(bool)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBoolean();
  }

  try_viewPaymentMethod(_token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "viewPaymentMethod",
      "viewPaymentMethod(address):(bool)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _FontERC20Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feesDistributionAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AdminEditPaymentTokenCall extends ethereum.Call {
  get inputs(): AdminEditPaymentTokenCall__Inputs {
    return new AdminEditPaymentTokenCall__Inputs(this);
  }

  get outputs(): AdminEditPaymentTokenCall__Outputs {
    return new AdminEditPaymentTokenCall__Outputs(this);
  }
}

export class AdminEditPaymentTokenCall__Inputs {
  _call: AdminEditPaymentTokenCall;

  constructor(call: AdminEditPaymentTokenCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _rewardAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AdminEditPaymentTokenCall__Outputs {
  _call: AdminEditPaymentTokenCall;

  constructor(call: AdminEditPaymentTokenCall) {
    this._call = call;
  }
}

export class AdminSettingsCall extends ethereum.Call {
  get inputs(): AdminSettingsCall__Inputs {
    return new AdminSettingsCall__Inputs(this);
  }

  get outputs(): AdminSettingsCall__Outputs {
    return new AdminSettingsCall__Outputs(this);
  }
}

export class AdminSettingsCall__Inputs {
  _call: AdminSettingsCall;

  constructor(call: AdminSettingsCall) {
    this._call = call;
  }

  get _exchangeFees(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _feesDistributionAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _FontERC20Address(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _FontRewardPaused(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class AdminSettingsCall__Outputs {
  _call: AdminSettingsCall;

  constructor(call: AdminSettingsCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BoostNFTCall extends ethereum.Call {
  get inputs(): BoostNFTCall__Inputs {
    return new BoostNFTCall__Inputs(this);
  }

  get outputs(): BoostNFTCall__Outputs {
    return new BoostNFTCall__Outputs(this);
  }
}

export class BoostNFTCall__Inputs {
  _call: BoostNFTCall;

  constructor(call: BoostNFTCall) {
    this._call = call;
  }

  get nft_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BoostNFTCall__Outputs {
  _call: BoostNFTCall;

  constructor(call: BoostNFTCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BuyLicenseCall extends ethereum.Call {
  get inputs(): BuyLicenseCall__Inputs {
    return new BuyLicenseCall__Inputs(this);
  }

  get outputs(): BuyLicenseCall__Outputs {
    return new BuyLicenseCall__Outputs(this);
  }
}

export class BuyLicenseCall__Inputs {
  _call: BuyLicenseCall;

  constructor(call: BuyLicenseCall) {
    this._call = call;
  }

  get nft_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _license_no(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class BuyLicenseCall__Outputs {
  _call: BuyLicenseCall;

  constructor(call: BuyLicenseCall) {
    this._call = call;
  }
}

export class ClaimEarningsCall extends ethereum.Call {
  get inputs(): ClaimEarningsCall__Inputs {
    return new ClaimEarningsCall__Inputs(this);
  }

  get outputs(): ClaimEarningsCall__Outputs {
    return new ClaimEarningsCall__Outputs(this);
  }
}

export class ClaimEarningsCall__Inputs {
  _call: ClaimEarningsCall;

  constructor(call: ClaimEarningsCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimEarningsCall__Outputs {
  _call: ClaimEarningsCall;

  constructor(call: ClaimEarningsCall) {
    this._call = call;
  }
}

export class ClaimFontRewardsCall extends ethereum.Call {
  get inputs(): ClaimFontRewardsCall__Inputs {
    return new ClaimFontRewardsCall__Inputs(this);
  }

  get outputs(): ClaimFontRewardsCall__Outputs {
    return new ClaimFontRewardsCall__Outputs(this);
  }
}

export class ClaimFontRewardsCall__Inputs {
  _call: ClaimFontRewardsCall;

  constructor(call: ClaimFontRewardsCall) {
    this._call = call;
  }
}

export class ClaimFontRewardsCall__Outputs {
  _call: ClaimFontRewardsCall;

  constructor(call: ClaimFontRewardsCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class MapAddUserBulkCall extends ethereum.Call {
  get inputs(): MapAddUserBulkCall__Inputs {
    return new MapAddUserBulkCall__Inputs(this);
  }

  get outputs(): MapAddUserBulkCall__Outputs {
    return new MapAddUserBulkCall__Outputs(this);
  }
}

export class MapAddUserBulkCall__Inputs {
  _call: MapAddUserBulkCall;

  constructor(call: MapAddUserBulkCall) {
    this._call = call;
  }

  get _address(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _nft(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MapAddUserBulkCall__Outputs {
  _call: MapAddUserBulkCall;

  constructor(call: MapAddUserBulkCall) {
    this._call = call;
  }
}

export class MapEditUserCall extends ethereum.Call {
  get inputs(): MapEditUserCall__Inputs {
    return new MapEditUserCall__Inputs(this);
  }

  get outputs(): MapEditUserCall__Outputs {
    return new MapEditUserCall__Outputs(this);
  }
}

export class MapEditUserCall__Inputs {
  _call: MapEditUserCall;

  constructor(call: MapEditUserCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nft(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MapEditUserCall__Outputs {
  _call: MapEditUserCall;

  constructor(call: MapEditUserCall) {
    this._call = call;
  }
}

export class MoveNFTOutCall extends ethereum.Call {
  get inputs(): MoveNFTOutCall__Inputs {
    return new MoveNFTOutCall__Inputs(this);
  }

  get outputs(): MoveNFTOutCall__Outputs {
    return new MoveNFTOutCall__Outputs(this);
  }
}

export class MoveNFTOutCall__Inputs {
  _call: MoveNFTOutCall;

  constructor(call: MoveNFTOutCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MoveNFTOutCall__Outputs {
  _call: MoveNFTOutCall;

  constructor(call: MoveNFTOutCall) {
    this._call = call;
  }
}

export class MoveNFTinCall extends ethereum.Call {
  get inputs(): MoveNFTinCall__Inputs {
    return new MoveNFTinCall__Inputs(this);
  }

  get outputs(): MoveNFTinCall__Outputs {
    return new MoveNFTinCall__Outputs(this);
  }
}

export class MoveNFTinCall__Inputs {
  _call: MoveNFTinCall;

  constructor(call: MoveNFTinCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MoveNFTinCall__Outputs {
  _call: MoveNFTinCall;

  constructor(call: MoveNFTinCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OrderBidCall extends ethereum.Call {
  get inputs(): OrderBidCall__Inputs {
    return new OrderBidCall__Inputs(this);
  }

  get outputs(): OrderBidCall__Outputs {
    return new OrderBidCall__Outputs(this);
  }
}

export class OrderBidCall__Inputs {
  _call: OrderBidCall;

  constructor(call: OrderBidCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _ref(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class OrderBidCall__Outputs {
  _call: OrderBidCall;

  constructor(call: OrderBidCall) {
    this._call = call;
  }
}

export class OrderBidApproveCall extends ethereum.Call {
  get inputs(): OrderBidApproveCall__Inputs {
    return new OrderBidApproveCall__Inputs(this);
  }

  get outputs(): OrderBidApproveCall__Outputs {
    return new OrderBidApproveCall__Outputs(this);
  }
}

export class OrderBidApproveCall__Inputs {
  _call: OrderBidApproveCall;

  constructor(call: OrderBidApproveCall) {
    this._call = call;
  }

  get _bid_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nft(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _withdrawNFT(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class OrderBidApproveCall__Outputs {
  _call: OrderBidApproveCall;

  constructor(call: OrderBidApproveCall) {
    this._call = call;
  }
}

export class OrderBidCancelCall extends ethereum.Call {
  get inputs(): OrderBidCancelCall__Inputs {
    return new OrderBidCancelCall__Inputs(this);
  }

  get outputs(): OrderBidCancelCall__Outputs {
    return new OrderBidCancelCall__Outputs(this);
  }
}

export class OrderBidCancelCall__Inputs {
  _call: OrderBidCancelCall;

  constructor(call: OrderBidCancelCall) {
    this._call = call;
  }

  get _bid_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nft(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OrderBidCancelCall__Outputs {
  _call: OrderBidCancelCall;

  constructor(call: OrderBidCancelCall) {
    this._call = call;
  }
}

export class OrderBuyCall extends ethereum.Call {
  get inputs(): OrderBuyCall__Inputs {
    return new OrderBuyCall__Inputs(this);
  }

  get outputs(): OrderBuyCall__Outputs {
    return new OrderBuyCall__Outputs(this);
  }
}

export class OrderBuyCall__Inputs {
  _call: OrderBuyCall;

  constructor(call: OrderBuyCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ref(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _withdrawNFT(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class OrderBuyCall__Outputs {
  _call: OrderBuyCall;

  constructor(call: OrderBuyCall) {
    this._call = call;
  }
}

export class OrderCancelCall extends ethereum.Call {
  get inputs(): OrderCancelCall__Inputs {
    return new OrderCancelCall__Inputs(this);
  }

  get outputs(): OrderCancelCall__Outputs {
    return new OrderCancelCall__Outputs(this);
  }
}

export class OrderCancelCall__Inputs {
  _call: OrderCancelCall;

  constructor(call: OrderCancelCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OrderCancelCall__Outputs {
  _call: OrderCancelCall;

  constructor(call: OrderCancelCall) {
    this._call = call;
  }
}

export class OrderCreateCall extends ethereum.Call {
  get inputs(): OrderCreateCall__Inputs {
    return new OrderCreateCall__Inputs(this);
  }

  get outputs(): OrderCreateCall__Outputs {
    return new OrderCreateCall__Outputs(this);
  }
}

export class OrderCreateCall__Inputs {
  _call: OrderCreateCall;

  constructor(call: OrderCreateCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get referralCommission(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get token(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get auction(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class OrderCreateCall__Outputs {
  _call: OrderCreateCall;

  constructor(call: OrderCreateCall) {
    this._call = call;
  }
}

export class OrderEditCall extends ethereum.Call {
  get inputs(): OrderEditCall__Inputs {
    return new OrderEditCall__Inputs(this);
  }

  get outputs(): OrderEditCall__Outputs {
    return new OrderEditCall__Outputs(this);
  }
}

export class OrderEditCall__Inputs {
  _call: OrderEditCall;

  constructor(call: OrderEditCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get referralCommission(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get token(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class OrderEditCall__Outputs {
  _call: OrderEditCall;

  constructor(call: OrderEditCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeMintCall extends ethereum.Call {
  get inputs(): SafeMintCall__Inputs {
    return new SafeMintCall__Inputs(this);
  }

  get outputs(): SafeMintCall__Outputs {
    return new SafeMintCall__Outputs(this);
  }
}

export class SafeMintCall__Inputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get royality(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SafeMintCall__Outputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }
}

export class SafeMintAndListCall extends ethereum.Call {
  get inputs(): SafeMintAndListCall__Inputs {
    return new SafeMintAndListCall__Inputs(this);
  }

  get outputs(): SafeMintAndListCall__Outputs {
    return new SafeMintAndListCall__Outputs(this);
  }
}

export class SafeMintAndListCall__Inputs {
  _call: SafeMintAndListCall;

  constructor(call: SafeMintAndListCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get royality(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get referral(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get token(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get auction(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class SafeMintAndListCall__Outputs {
  _call: SafeMintAndListCall;

  constructor(call: SafeMintAndListCall) {
    this._call = call;
  }
}

export class SafeMintToCall extends ethereum.Call {
  get inputs(): SafeMintToCall__Inputs {
    return new SafeMintToCall__Inputs(this);
  }

  get outputs(): SafeMintToCall__Outputs {
    return new SafeMintToCall__Outputs(this);
  }
}

export class SafeMintToCall__Inputs {
  _call: SafeMintToCall;

  constructor(call: SafeMintToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nft(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get royality(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SafeMintToCall__Outputs {
  _call: SafeMintToCall;

  constructor(call: SafeMintToCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpdateRoyalityCall extends ethereum.Call {
  get inputs(): UpdateRoyalityCall__Inputs {
    return new UpdateRoyalityCall__Inputs(this);
  }

  get outputs(): UpdateRoyalityCall__Outputs {
    return new UpdateRoyalityCall__Outputs(this);
  }
}

export class UpdateRoyalityCall__Inputs {
  _call: UpdateRoyalityCall;

  constructor(call: UpdateRoyalityCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get royality(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class UpdateRoyalityCall__Outputs {
  _call: UpdateRoyalityCall;

  constructor(call: UpdateRoyalityCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}
